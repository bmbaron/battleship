(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".main-container {\n    background-color: green;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 5%;\n    /* margin: 10%; */\n    margin-bottom: 5%;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 30px 30px 30px 30px 30px 30px 30px 30px 30px 30px;\n    grid-auto-rows: 35px;\n    margin: 20px;\n}\n\n.disabled {\n    pointer-events: none;\n}\n\n.prompt-box {\n    text-align: center;\n    margin: auto;\n    display: block;\n    width: 70%;\n    height: 20%;\n    border: 2px solid black;\n    background-color: lightgrey;\n    font-size: 2rem;\n}\n\n.button {\n    background-color: white;\n}\n\n.button:hover {\n    background-color: lightcoral !important;\n    cursor: pointer;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,UAAU;IACV,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,wEAAwE;IACxE,oBAAoB;IACpB,YAAY;AAChB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,UAAU;IACV,WAAW;IACX,uBAAuB;IACvB,2BAA2B;IAC3B,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uCAAuC;IACvC,eAAe;AACnB",sourcesContent:[".main-container {\n    background-color: green;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 5%;\n    /* margin: 10%; */\n    margin-bottom: 5%;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 30px 30px 30px 30px 30px 30px 30px 30px 30px 30px;\n    grid-auto-rows: 35px;\n    margin: 20px;\n}\n\n.disabled {\n    pointer-events: none;\n}\n\n.prompt-box {\n    text-align: center;\n    margin: auto;\n    display: block;\n    width: 70%;\n    height: 20%;\n    border: 2px solid black;\n    background-color: lightgrey;\n    font-size: 2rem;\n}\n\n.button {\n    background-color: white;\n}\n\n.button:hover {\n    background-color: lightcoral !important;\n    cursor: pointer;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);o&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=o.base?s[0]+o.base:s[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var p=t(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(f);else{var A=r(f,o);o.byIndex=c,n.splice(c,0,{identifier:d,updater:A,references:1})}i.push(d)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=o(e,r),l=0;l<a.length;l++){var u=t(a[l]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var o={};(()=>{t.d(o,{V:()=>v,t:()=>C});var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),c=t.n(i),s=t(565),l=t.n(s),u=t(216),d=t.n(u),p=t(589),f=t.n(p),A=t(28),m={};m.styleTagTransform=f(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),n()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const g=(()=>{const e=[];let n=1,t=!1;const o=()=>{if(!t){let t=Math.floor(99*Math.random())+2;if(!0!==e.includes(t))for(const o of container1.querySelectorAll("button"))o.innerText==t&&(o.click(),n=t,e.push(n));else o()}var n},r=e=>{t=!0,document.getElementById("main-container").style.pointerEvents="none",h.displayPrompt(e)};return{nextMove:async e=>{const t=document.getElementById("container2");if(1==e){let e=n;for(const n of t.querySelectorAll("button"))n.innerText==e&&e<99&&n.click();n++}2==e&&(t.classList.add("disabled"),await new Promise((e=>setTimeout(e,50))),o(),t.classList.remove("disabled"))},computerMove:o,checkIfAllSunk:e=>{console.log("checked");const n=v.getShips(),t=C.getShips();let o=0;1==e?n.forEach((e=>{e.ship.sunk&&(o++,7==o&&(r("Computer wins!"),C.placeShips(t,2)))})):(t.forEach((e=>{if(e.ship.sunk)if(o++,7==o)r("Player wins!");else{let e=7-o;h.displayPrompt("Sunk! Only "+e+" more to go!")}})),0==o&&h.displayPrompt("Good luck, battleship!"))}}})(),h=(()=>{const e=document.createElement("div"),n=(e,n,t)=>{if("miss"==e&&(n.style.backgroundColor="lightblue",n.style.pointerEvents="none"),"hit"==e&&(n.style.backgroundColor="orange",n.style.pointerEvents="none"),"sunk"==e)for(const e of document.getElementById("container"+t).querySelectorAll("button"))n.forEach((n=>{e.innerText==n&&(e.style.backgroundColor="red")}))};return{displayBoard:(e,t)=>{let o=document.getElementById("main-container"),r=document.createElement("div");r.classList.add("container"),r.id="container"+e;let a=[];for(let o=1;o<=100;o+=10)for(let i=o;i<=o+9;i++)a[i]=document.createElement("button"),a[i].className="button",a[i].style.height="40px",a[i].style.width="40px",a[i].innerText=i,a[i].onclick=o=>{n("miss",a[i]),t.forEach((t=>{t.getCoords().forEach((o=>{o==a[i].innerText&&(n("hit",a[i]),t.markHit(o),g.checkIfAllSunk(e))}))})),g.nextMove(e)},r.appendChild(a[i]);o.appendChild(r)},displayPrompt:n=>{void 0!==n?e.innerHTML=n:(e.textContent="Start game by attacking a position on the computer's board. There are 7 ships!",e.classList.add("prompt-box"),document.body.appendChild(e))},changeColor:n}})();function b(e,n,t){const o={shipLength:e,coordinates:n,boardNumber:t,sunk:!1},r=[...o.coordinates],a=()=>o.coordinates;return{ship:o,getCoords:a,markHit:e=>{let n=r.indexOf(e);r.splice(n,1),a(),0==r.length&&(o.sunk=!0,h.changeColor("sunk",a(),o.boardNumber))}}}function y(e){const n=()=>e,t=[];return{getNumber:n,getShips:()=>t,createShips:()=>{let e=[5,4,3,2,2,1,1],o=[];for(let r=0;r<7;r++){let a=[],i=Math.floor(99*Math.random())+2;if(Math.random()<.5){let n=Math.floor(i/1%10);(n>10-e[r]||0==n)&&(i-=5);for(let n=0;n<e[r];n++)a[n]=i,i++}else{i+10*(e[r]-1)>100&&(i-=50);for(let n=0;n<e[r];n++)a[n]=i,i+=10}let c=!1;for(let e=0;e<a.length;e++)o.forEach((n=>{a[e]==n||a[e]-1==n||a[e]+1==n?c=!0:a[e]-10!=n&&a[e]+10!=n||(c=!0)}));if(c)r--;else{for(let e=0;e<a.length;e++)o.push(a[e]);o.push(""),t[r]=b(e[r],a,n())}}return t},placeShips:(e,n)=>{e.forEach((e=>{const t=e.getCoords();for(const e of document.getElementById("container"+n).querySelectorAll("button")){const n=Number(e.innerText);-1!==t.indexOf(n)&&"orange"!=e.style.backgroundColor&&"red"!=e.style.backgroundColor&&(e.style.backgroundColor="grey")}}))}}}const v=y(1),x=v.createShips();h.displayBoard(1,x),v.placeShips(x,1);const C=y(2),B=C.createShips();h.displayBoard(2,B),h.displayPrompt(),document.getElementById("container1").classList.add("disabled"),console.log(B[0].getCoords()),console.log(B[1].getCoords()),console.log(B[2].getCoords()),console.log(B[3].getCoords()),console.log(B[4].getCoords()),console.log(B[5].getCoords()),console.log(B[6].getCoords())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,