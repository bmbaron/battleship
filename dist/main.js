(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".main-container {\n    background-color: green;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 10%;\n    margin-bottom: 5%;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 30px 30px 30px 30px 30px 30px 30px 30px 30px 30px;\n    grid-auto-rows: 35px;\n}\n\n.disabled {\n    pointer-events: none;\n}\n\n.prompt-box {\n    text-align: center;\n    margin: auto;\n    display: block;\n    width: 70%;\n    height: 20%;\n    border: 2px solid black;\n    background-color: lightgrey;\n    font-size: 2rem;\n}\n\n.button {\n    background-color: white;\n}\n\n.button:hover {\n    background-color: lightcoral !important;\n    cursor: pointer;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,wEAAwE;IACxE,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,UAAU;IACV,WAAW;IACX,uBAAuB;IACvB,2BAA2B;IAC3B,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uCAAuC;IACvC,eAAe;AACnB",sourcesContent:[".main-container {\n    background-color: green;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 10%;\n    margin-bottom: 5%;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 30px 30px 30px 30px 30px 30px 30px 30px 30px 30px;\n    grid-auto-rows: 35px;\n}\n\n.disabled {\n    pointer-events: none;\n}\n\n.prompt-box {\n    text-align: center;\n    margin: auto;\n    display: block;\n    width: 70%;\n    height: 20%;\n    border: 2px solid black;\n    background-color: lightgrey;\n    font-size: 2rem;\n}\n\n.button {\n    background-color: white;\n}\n\n.button:hover {\n    background-color: lightcoral !important;\n    cursor: pointer;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);o&&i[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),n.push(p))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=o.base?s[0]+o.base:s[0],p=a[l]||0,d="".concat(l," ").concat(p);a[l]=p+1;var u=t(d),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var f=r(A,o);o.byIndex=c,n.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=o(e,r),l=0;l<a.length;l++){var p=t(a[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),c=t(565),s=t.n(c),l=t(216),p=t.n(l),d=t(589),u=t.n(d),A=t(28),f={};function m(e,n){const t={shipLength:e,coordinates:n,sunk:!1};return{ship:t,getCoords:()=>t.coordinates,markHit:e=>{let n=t.coordinates.indexOf(e);t.coordinates.splice(n,1),console.log("hit"),0==t.coordinates.length&&alert("sunk")}}}function h(e){return{getName:()=>e,createShips:()=>{let e=[5,4,3,2,2,1,1],n=[],t=[];for(let o=0;o<7;o++){let r=[],a=Math.floor(99*Math.random())+2;if(Math.random()<.5){let n=Math.floor(a/1%10);(n>10-e[o]||0==n)&&(a-=5);for(let n=0;n<e[o];n++)r[n]=a,a++}else{a+10*(e[o]-1)>100&&(a-=50);for(let n=0;n<e[o];n++)r[n]=a,a+=10}let i=!1;for(let e=0;e<r.length;e++)t.forEach((n=>{r[e]==n||r[e]-1==n||r[e]+1==n?i=!0:r[e]-10!=n&&r[e]+10!=n||(i=!0)}));if(i)o--;else{for(let e=0;e<r.length;e++)t.push(r[e]);t.push(""),n[o]=m(e[o],r)}}return n},placeShips:(e,n)=>{e.forEach((e=>{const t=e.getCoords();for(const e of document.getElementById("container"+n).querySelectorAll("button")){const n=Number(e.innerText);-1!==t.indexOf(n)&&(e.style.backgroundColor="grey")}}))}}}f.styleTagTransform=u(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=p(),n()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;const g=((e,n)=>{const t=()=>{let e=Math.floor(99*Math.random())+2;for(const n of container1.querySelectorAll("button"))n.innerText==e&&n.click()};return{nextMove:async e=>{const n=document.getElementById("container2");2==e?(v.displayPrompt("Opponent's move"),await new Promise((e=>setTimeout(e,2e3))),n.classList.add("disabled"),t()):(v.displayPrompt("Player's move"),n.classList.remove("disabled"))},computerMove:t}})(),v=(()=>{const e=document.createElement("div");return{displayBoard:(e,n)=>{let t=document.getElementById("main-container"),o=document.createElement("div");o.classList.add("container"),o.id="container"+e;let r=[];for(let t=1;t<=100;t+=10)for(let a=t;a<=t+9;a++)r[a]=document.createElement("button"),r[a].className="button",r[a].style.height="40px",r[a].style.width="40px",r[a].innerText=a,r[a].onclick=t=>{r[a].style.backgroundColor="blue",n.forEach((e=>{e.getCoords().forEach((n=>{n==r[a].innerText&&(r[a].style.backgroundColor="red",r[a].style.pointerEvents="none",e.markHit(n))}))})),g.nextMove(e)},o.appendChild(r[a]);o.style.margin="20px",t.appendChild(o)},displayPrompt:n=>{void 0!==n?e.textContent=n:(e.textContent="Player choose location to attack on opponent's board",e.classList.add("prompt-box"),document.body.appendChild(e))}}})(),y=h("player 1"),b=y.createShips();v.displayBoard(1,b),y.placeShips(b,1);const x=h("player 2").createShips();v.displayBoard(2,x),v.displayPrompt(),document.getElementById("container1").classList.add("disabled")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,